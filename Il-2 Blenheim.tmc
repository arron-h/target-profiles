include "target.tmh"
include "Il-2_CloD.ttm"

int SetShiftState()
{
	// Pinky Switch controls the state
	// FWD = Bombardier
	// MDL = Pilot
	// BCK = Gunner
	SetShiftButton( &Joystick, S4, &Throttle, 0, 0 );

	return 0;
}

int MapAxes()
{
	MapAxis( &Joystick, JOYX, DX_X_AXIS, AXIS_NORMAL, MAP_ABSOLUTE );
	MapAxis( &Joystick, JOYY, DX_Y_AXIS, AXIS_NORMAL, MAP_ABSOLUTE );

	MapAxis( &Throttle, THR_FC,    DX_SLIDER_AXIS, AXIS_REVERSED, MAP_ABSOLUTE );
	MapAxis( &Throttle, THR_RIGHT, DX_Z_AXIS,      AXIS_REVERSED, MAP_ABSOLUTE );
	MapAxis( &Throttle, THR_LEFT,  DX_ZROT_AXIS,   AXIS_REVERSED, MAP_ABSOLUTE );

	// Rudder on SCX. Use a curve.
	MapAxis( &Throttle, SCX, DX_XROT_AXIS, AXIS_NORMAL );
	SetSCurve( &Throttle, SCX, 0, 20, 0, 5, -2 );

	// Not used
	MapAxis( &Throttle, SCY, 0, AXIS_NORMAL, MAP_RELATIVE );

	return 0;
}

int MapThrottleInputs()
{
	int kStartupDelayTime = 50;

	// Use a nice little combo to start an engine.
	MapKey( &Throttle, EOLIGN, CHAIN( LOCK +
	                                  PULSE + engselect_n0,
	                                  D( kStartupDelayTime ),
	                                  PULSE + enginei01,
	                                  D( kStartupDelayTime ),
	                                  PULSE + engselect_all,
                                      LOCK ) );

	MapKey( &Throttle, EORIGN, CHAIN( LOCK +
	                                  PULSE + engselect_n1,
	                                  D( kStartupDelayTime ),
	                                  PULSE + enginei01,
	                                  D( kStartupDelayTime ),
	                                  PULSE + engselect_all,
                                      LOCK ) );

	// Flaps
	MapKey( &Throttle, FLAPSU, landingflaps_u );
	MapKey( &Throttle, FLAPSD, landingflaps_d );

	// @todo - determine whether it's possible to use explicit raise/lower
	//MapKey( &Throttle, EACON,  )

	// 2-speed propellor pitch control
	MapKey( &Throttle, CHF, pitch_plus );
	MapKey( &Throttle, CHB, pitch_minus );

	// Cowl/radiator
	MapKey( &Throttle, SPDF, rad_plus );
	MapKey( &Throttle, SPDB, rad_minus );

	// Wheel chocks
	MapKey( &Throttle, SC, brakeshoes01 );

	// @todo - make sure this actually works
	// Select crew position (and also shift UMD state)
	MapKey( &Throttle, PSF, PULSE + cabin2 );
	MapKey( &Throttle, PSM, PULSE + cabin1 );
	MapKey( &Throttle, PSB, PULSE + cabin3 );

	return 0;
}

int MapStickInputs()
{
	// FOV
	MapKey( &Joystick, H4U, fov_plus );
	MapKey( &Joystick, H4D, fov_minus );

	// Trim. Blenheim has no aileron trim
	MapKey( &Joystick, H1L, ruddert_left );
	MapKey( &Joystick, H1R, ruddert_right );
	MapKey( &Joystick, H1U, elevatort_ndown );
	MapKey( &Joystick, H1D, elevatort_nup );

	// Virtual views
	MapKey( &Joystick, H2U, toggleAim );
	MapKey( &Joystick, H2D, toggleDash );

	// Guns/bomb pickle
	MapKey( &Joystick, TG1, trigger0 );
	MapKey( &Joystick, S2,  trigger1 );

	// Salvo mode cycle
	MapKey( &Joystick, S1,  nextBombMode );

	// Bomb aimer. Paddle toggles alt/vel on DMS up/down
	MapKey( &Joystick, H3L, adjustsight_left );
	MapKey( &Joystick, H3R, adjustsight_right );
	MapKeyIO( &Joystick, H3U, sightalt_plus,  sightvel_plus );
	MapKeyIO( &Joystick, H3D, sightalt_minus, sightvel_minus );

	return 0;
}

// Program startup
int main()
{
	Configure( &HCougar, MODE_EXCLUDED );
	Configure( &T16000, MODE_EXCLUDED );

	Configure( &LMFD, MODE_EXCLUDED );
	Configure( &RMFD, MODE_EXCLUDED );

	if( Init( &EventHandle ) )
	{
		return 1; // Declare the event handler, return on error
	}

	SetShiftState();
	MapAxes();
	MapThrottleInputs();
	MapStickInputs();

	return 0;
}

// Event handler
int EventHandle( int type, alias o, int x )
{
	DefaultMapping( &o, x );

	return 0;
}
